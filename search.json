[{"title":"数据库系统概论一（绪论)","url":"/2023/07/17/DB1/","content":"\n一、数据库系统概述（一）数据库的4个基本概念1、数据：数据是数据库中存储的基本对象\n2、数据库：顾名思义，是存放数据的仓库\n3、数据库管理系统：是位于用户与操作系统之间的一层数据管理软件\n主要功能包括以下几个方面：\n（1）数据定义功能,DDL\n（2）数据组织、存储和管理\n（3）数据操纵功能\n（4）数据库的事务管理和运行管理\n（5）数据库的建立和维护功能\n（6）其他功能\n4、数据库系统：由数据库、数据库管理系统、应用程序和数据库管理员组成的存储、管理、处理和维护数据的系统\n（二）数据管理的三个阶段1、人工管理阶段：无共享、冗余度极大\n2、文件系统阶段：共享性差、冗余度大\n3、数据库系统阶段：共享性高、冗余度小\n（三）数据库系统的特点1、数据结构化：数据库系统实现整体数据的结构化，这是主要特征之一，也是数据库系统和文件系统的本质区别\n2、数据的共享性高、冗余度低且易扩充：数据共享可以大大减少数据冗余，节约存储空间。数据共享还能够避免数据之间的不相容性与不一致性\n3、数据独立性高：数据独立性高包括物理独立性和逻辑独立性\n4、数据由数据库管理系统统一管理和控制：数据库管理系统必须提供以下几方面的数据控制功能：（1）数据的安全性保护（2）数据的完整性检查（3）并发控制（4）数据库恢复\n二、数据模型数据模型也是一种模型，它是对现实世界数据特征的抽象\n（一）两类数据模型第一类是概念模型，第二类是逻辑模型和物理模型。\n概念模型：信息模型，主要用于数据库设计\n逻辑模型：主要包括层次模型、网状模型、关系模型、面向对象模型和对象关系数据模型、半结构化数据模型。主要用于数据库管理系统的实现\n物理模型：是对数据最底层的抽象。\n（二）概念模型1、信息世界中的基本概念\n（1）实体：客观存在并相互可区别的实物称为实体\n（2）属性：实体所具有的某一特性称为属性\n（3）码：唯一标识实体的属性集称为码\n（4）实体型：用实体名和属性名来抽象刻画共同类实体\n（5）实体集：同一类型实体的集合，例如全体学生就是一个实体集\n（6）联系：在现实世界中，事物内部以及事物之间是有联系的\n2、实体-联系方法\nE-R图，来描述现实世界的概念模型，E-R方法也称为E-R模型。\n（三）数据模型的组成要素数据模型通常由数据结构、数据操作和数据完整性约束条件三部分组成。\n1、数据结构\n数据结构描述数据库的组成对象以及对象之间的联系\n2、数据操作\n数据操作是指对数据库中各种对象的实例允许执行的操作的集合，包括操作以及有关的操作规则\n3、数据完整性\n数据的完整性约束条件是一组完整性规则\n4、常用的数据模型：\n\n层次模型\n网状模型\n关系模型\n面向对象数据模型\n对象关系数据模型\n半结构化数据模型\n\n（四）层次模型最早用到的数据模型。\n层次模型用树形结构来表示各种实体以及实体间的联系。\n1、层次模型的数据结构：\n在数据库中定义满足下面两个条件的基本层次联系的集合为层次模型\n（1）有且只有一个结点没有双亲结点，这个结点称为根结点\n（2）根意外的其他结点有且只有一个双亲结点\n2、层次模型的优缺点\n优点：（1）层次模型的数据结构比较简单清晰\n（2）层次数据库的查询效率高\n（3）层次数据模型提供了良好的完整性支持\n缺点：（1）现实世界中很多联系是非层次的\n（2）如果一个结点具有多个双亲结点，用层次模型这类联系就很笨拙\n（3）查询子女结点必须通过双亲结点\n（4）由于结构严密，层次命令趋于程序化\n（五）网状模型网状数据模型的典型代表是DBTG系统\n1、网状模型的数据结构\n在数据库中，把满足以下两个条件的基本层次联系集合称为网状模型：\n（1）允许一个以上的结点无双亲\n（2）一个结点可以有多于一个的双亲\n层次模型中子女结点与双亲结点的联系是唯一的，而在网状模型中这种联系可以不唯一。\n2、网状模型的优缺点\n优点：（1）能够更为直接的描述现实世界，如一个结点可以有多个双亲，结点之间可以有多种联系。\n（2）具有良好的性能，存取效率较高\n缺点：（1）结构比较复杂，随着应用环境扩大，数据库的结构就变得越来越复杂\n（2）网状模型的DDL、DML复杂\n（六）关系模型关系模型是最重要的一种数据模型。关系数据库系统采用关系模型作为数据的组织方式。\n1、关系模型的数据结构\n关系模型要求关系必须是规范化的，关系的每一个分量必须是一个不可分的数据项。\n2、关系模型的数据操纵和完整性约束\n关系的完整性约束条件三大类：实体完整性、参照完整性和用户定义完整性。\n关系模型中的数据操作是集合操作，操作对象和操作结果都是关系，关系模型把存取路径向用户隐蔽起来，用户只要指出“干什么”或“找什么”，不必详细说明“怎么干”或“怎么找”，大大提高数据的独立性，提高了用户的生产率\n3、关系模型的优缺点\n优点：（1）关系模型与格式化模型不同，它是建立在严格的数学概念的基础上的。\n（2）关系模型的概念单一。简单易用\n（3）存取路径对用户透明，从而具有更高的数据独立性。\n缺点：查询效率不够高\n三、数据库系统的结构（一）数据库系统模式的概念在数据模型中有“型”和“值”的概念\n模式是数据库中全体数据的逻辑结构和特征的描述。\n模式是相对稳定的，而实例是相对变动的。\n数据库在体系结构上通常都具有相同的特征，即三级模式结构并提供两级映像功能。\n（二）数据库系统的三级模式结构1、模式：模式也称逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图\n2、外模式：外模式也称为子模式或用户模式，它是数据库用户能够看见和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示\n3、内模式：内模式也称为存储模式，一个数据库只有一个内模式。它是数据物理结构和存储方式的描述，是数据在数据库内部的组织方式。\n（三）数据库的二级映像功能与数据独立性1、外模式：当模式改变时，由数据库管理员对各个外模式的映像做出相应改变，可以使外模式不变。应用程序是依据数据的外模式编写的，从而应用程序不必修改，保证了数据与程序的逻辑独立性，简述数据的逻辑独立性。\n2、内模式映像：当数据存储结构改变时，由数据库管理员对内模式映像做出相应改变，可以使模式保持不变，从而应用程序也不必改变。保证了数据与程序的物理独立性，简称数据的物理独立性。\n数据与程序之间的独立性使得数据的定义和描述可以从应用程序中分离出去。由于数据的存取由数据库管理系统管理，从而简化了应用程序的编制，减少了应用程序的维护和修改。\n四、数据库系统的组成1、硬件平台以及数据库‘\n2、软件\n3、人员\n（1）数据库管理员：\n①决定数据库中的信息内容和结构\n②决定数据库的存储结构和完整性约束条件\n③定义数据的安全性要求和完整性约束条件\n④监控数据库的使用和运行\n⑤数据库的改进和重组、重构\n（2）系统分析员和数据库设计人员\n（3）应用程序员\n（4）用户\n","categories":["DataBase"],"tags":["DataBase"]},{"title":"数据库系统概论二（关系型数据库)","url":"/2023/07/17/DB2/","content":"\n一、关系数据结构及形式化定义（一）关系关系模型的数据结构非常简单，只包含单一的数据结构——关系。这里从集合论角度给出关系结构数据的形式化定义。\n1、域\n域是一组具有相同数据类型的值的集合。\n2、笛卡尔积\n给定一组域，允许其中某些域是相同的，D1,D2,……,Dn的笛卡尔积为\n{D1*D2………..D3}&#x3D;{(d1,d2,…,dn)|di ∈ Di , i &#x3D; 1 , 2 , 3 , …….. , n}\n其中(d1,d2,…,dn)叫做一个n元组，或简称元组，元素中每一个di叫做一个分量。\n一个域中允许的不同取值个数称为这个域的基数。\n3、关系\n若关系中的某一个属性组能唯一地标识一个元组，而其子集不能，则称该属性组为候选码。若一个关系有多个候选码，则选定其中一个为主码。\n候选码的诸属性为主属性。\n关系可以有三种类型：基本关系、查询表和视图表。\n基本关具有以下六个性质：\n（1）列是同质的，每一个列中的分量都来自同一类型数据，来自同一个域。\n（2）不同的列可出自同一个域，称其中的每一列位一个属性。\n（3）列的顺序无所谓。\n（4）任意两个元组的候选码不能取相同的值。\n（5）行的顺序无所谓。\n（6）分量必须取原子值。\n这些规范条件中最基本的一条就是，关系的每一个分量必须是一个不可分的数据项。\n规范化的关系简称为范式。\n（二）关系模式关系的描述称为关系模式，它可以形式化表示R(U,D,DOM,F)\nR为关系名，U为组成该关系的属性名集合，D为U中属性所来自的域，DOM为属性向域的映像集合，F为属性间数据的依赖关系集合。\n关系模式可以简记为R(U)或R(A1,A2,…,An)\n（三）关系数据库在关系模型中，实体及实体间的联系都是用关系来表示的。在一个给定的应用领域中，所有关系的集合构成一个关系数据库。\n关系数据库的型称为关系数据库模式，是对关系数据库的描述。关系数据库的值是这些关系模式在某一时刻对应的关系的集合，通常就称为关系数据库\n（四）关系模型的存储结构二、关系操作（一）基本的关系操作关系模型中常用的关系操作包括查询和插入、删除、修改操作两大部分。\n关系的查询表达能力很强，是关系操作中最主要的部分，其中选择、投影、并、差、笛卡尔积是5种基本操作，其他操作可以用基本操作来定义和导出。\n关系操作的特点是集合操作方式，即操作的对象和结果都是集合。\n（二）关系数据语言的分类早期的关系操作能力通常用代数方式或逻辑方式来表示，分别称为关系代数和关系演算。另外还有一种介于关系代数和关系演算之间的结构化语言——SQL。SQL不仅具有丰富的查询功能，而且具有数据定义和数据控制功能，是集查询、数据定义语言、数据操纵语言和数据控制语言于一体的关系数据语言。\n三、关系的完整性（一）实体完整性关系数据库中的每个元组应该是可区分的，是唯一的。\n规则1、实体完整性\n例如学生（学号，姓名，性别，专业号，年龄）关系中学号为主码，则学号不能为空\n（二）参照完整性例如：学生（学号，姓名，性别，专业号，年龄）\n专业（专业号，专业名）\n这两个关系之间存在着属性的引用，即学生关系引用了专业关系的主码“专业号”。\n规则2、参照完整性规则\n（三）用户定义的完整性任何关系数据库系统都应该支持实体完整性和参照完整性。\n四、关系代数关系代数是一种抽象的查询语言，它用对关系的运算来表达查询。\n关系代数的运算按运算符的不同可分为传统的集合运算和专门的关系运算两类。\n（一）传统的集合运算传统的集合运算是二目运算，包括并，差，交，笛卡尔积四种运算。\n\n\n（二）专门的关系运算专门的关系运算包括选择、投影、连接、除运算等。\n1、选择\n选择又称为限制。\n\n\n\n\n选择查询\n2、投影\n关系R上的投影是从R中选择出若干属性列组成新的关系。\n\n3、连接\n连接也称为θ连接。\nθ为“&#x3D;”的连接运算称为等值连接。自然连接是一种特殊的等值连接。\n\n\n\n\n4、除运算\n设关系R除以关系S的结果为关系T，则T包含所有在R但不在S中的属性及其值，且T的元组与S的元组的所有组合都在R中。\n\n\n五、关系演算（一）元组关系演算语言ALPHAALPHA语言主要有GET、PUT、HOLD、UPDATE、DELETE、DROP六条语句。语句的基本格式为\n操作语句 工作空间名（表达式）：操作条件\n1、检索操作\n用GET语句实现\n（1）简单检索（不带条件）\n例：\nGET W(SC.Cno)\nW为工作空间名。这里条件为空\n查询所有学生的数据\nGET W(Student)\n（2）限定检索\n查询所有小于20岁的学生的学号和年龄\nGET W(Student.Sno,Student.Sage): Student.Sdept &#x3D; “IS”^Student.Sage&lt;20\n（3）带排序的检索\n降序\nGET W(Student.Sno,Student,Sage): Student.Sdept &#x3D; “CS” DOWN Student.Sage\n（5）用元组变量的检索\n例：\n查询信息系学生的名字\nRANGE Student X\nGET W(X.Sname) : X.Sdept&#x3D;’IS’\nALHPA语言用RANGE来说明元组变量。本例中X是关系Student上的元组变量，用途是简化关系名，即用X代表Student\n（6）用存在量词的检索\n查询选修2号课程的学生的名字\nRANGE SC X\nGET W(Student.Sname) : 彐X(X.Sno&#x3D;Student^X.Cno&#x3D;’2’)\n2、更新操作\n（1）修改操作\n修改操作用UPDATE语句实现。\n①首先用 HOLD语句将要修改的元组从数据库中读到工作空间中；\n②然后用宿主语言修改工作空间中元组的属性值：\n③最后用 UPDATE 语句将修改后的元组送回数据库中。需要注意的是，单纯检素数据使用 GET 语句即可，但为修改数据而读元组时必须使用HOLD 语句，HOLD语句是带上并发控制的 GET 语句。\n例：\n把201215127 学生从计算机科学系转到信息系。HOLD W (Student.Sno, Student Sdept): Student.Sno&#x3D;201215127（从 Student 关系中读出 201215127 学生的数据)MOVE ‘IS’ TO W.Sdept(用宿主语言进行修改）UPDATE W(把修改后的元组送回 Student 关系）\n（2）插入操作\n插入操作用PUT语句实现\n①首先用宿主语言在工作空间中建立新元组；②然后用 RUT 语句把该元组存入指定的关系中。例：学校新开设了一门2 学分的课程“计算机组织与结构”，其课程号为 8，直接先行课为 6 号课程。插入该课程元组。MOVE ‘8’ TO W.CnoMOVE 计算机组织与结构’TO W.CnameMOVE ‘6’ TO W.CpnoMOVE ‘2’ TO W.CcreditPUT W (Course)（3）删除刪除操作用 DELETE 语句实现。其步骤为：①用HOLD 语句把要删除的元组从数据库中读到工作空间中：②用 DELETE 语句删除 该元组。例： 201215230 学生因故退学，删除该学生元组。HOLD W (Student): Student.Sno ‘201215230DELETE W\n（二）元组关系演算在元组关系演算系统中，称{t|φ(t)}为元组演算表达式。t为元组变量，φ(t)为元组关系演算公式。\n（三）域关系演算语言QBE域关系演算以元组变量的分量（即域变量）作为谓词变元的基本对象。\nQBE是Query By Example（即通过例子进行查询）的简称。\n","categories":["DataBase"],"tags":["DataBase"]},{"title":"数据库系统概论三（关系型数据库标准语言SQL)","url":"/2023/07/17/DB3/","content":"\n一、SQL概述（一）SQL发展目前，没有一个数据库系统能够支持SQL标准的所有概念和特性\n（二）SQL的特点1、综合统一\n2、高度非过程化\n只要提出“做什么”，而无需指明“怎么做”，因此无需了解存取路径。存取路径的选择以及SQL的操作过程由系统自动完成。\n3、面向集合的操作方式\n4、以同一种语法结构提供多种使用方式\n5、语言简洁，易学易用\n（三）SQL的基本概念支持SQL的关系数据库管理系统同样支持关系数据库三级模式结构。\n二、学生-课程数据库以学生-课程数据库为例讲解SQL的数据定义等语句\n\n学生表：Student(Sno,Sname,Ssex,Sage,Sdept)\n\n课程表：Course(Cno,Cname,Cpno,Ccredit)\n\n学生选课表：SC(Sno,Cno,Grade)\n\n\n\n\n一个关系数据库管理系统的实例可以建立多个数据库，一个数据库中可以建立多个模式，一个模式下通常包括多个表、视图和索引等数据库对象。\n三、数据定义（一）模式的定义与删除1、定义模式\nCREATE SCHEMA &lt;模式名&gt; AUTHORIZATION &lt;用户名&gt;\n\n例：为用户WANG定义一个学生-课程模式S-T\nCREATE SCHEMA&quot;S-T&quot; AUTHORIZATION WANG;\n\n例：\nCREATE SCHEMA AUTHORIZATION WANG;\n\n该语句没有指定&lt;模式名&gt;，所以&lt;模式名&gt;隐含为用户名WANG\n例：为用户ZHANG创建一个模式TEST，并且在其中定义一个表TAB1\nCREATE SCHEMA TEST AUTHORIZATION ZHANGCREATE TABLE TAB1(COL1 SMALLINT,\t\t\t \t  COL2 INT,\t\t\t\t  COL3 CHAR(20),\t\t\t\t  COL4 NUMERIC(10,3),\t\t\t\t  COL5 DECIMAL(5,2));\n\n2、删除模式\n在SQL中，删除模式语句如下：\nDROP SCHEMA&lt;模式名&gt;&lt;CASCADE|RESTRICT&gt;\n\n例3.4：\nDROP SCHEMA ZHANG CASCADE\n\n这句话删除模式ZHANG，同时，该模式中定义的表TAB1也被删除了\n（二）基本表的定义、删除与修改1、定义基本表\nSQL使用CREATE TABLE语句来定义基本表，其基本格式如下：\nCREATE TABLE&lt;表名&gt;(&lt;列名&gt;&lt;数据类型&gt;[列级完整性约束条件]\t\t\t\t,&lt;列名&gt;&lt;数据类型&gt;[列级完整性约束条件]\t\t\t\t...\t\t\t\t[,&lt;表级完整性约束条件&gt;]\t\t\t\t)\n\n例：建立一个“学生”表Student\nCREATE TABLE Student(Sno CHAR(9) PRIMARY KEY,Sname CHAR(20) UNIQUE,Ssex CHAR(2),Sage SMALLINT,Sdept CHAR(20));\n\n例：建立一个“课程”表Course\nCREATE TABLE Course(Cno CHAR(4) PRIMARY KEY,Cname CHAR(40) NOT NULL,Cpno CHAR(4),Ccredit SMALLINT,FOREIGN KEY (Cpno) REFERENCES Course(Cno))\n\n例：建立学生选课表SC\nCREATE TABLE SC(Sno CHAR(9),Cno CHAR(4),Grade SMALLINT,PRIMARY KEY(Sno,Cno),FOREIGN KEY(Sno) REFERENCES Student(Sno),FOREIGN KEY(Cno) REFERENCES Cource(Cno))\n\n2、数据类型\n\n\n\n\n3、修改基本表\nALTER TABLE&lt;表名&gt;[ADD [COLUMN] &lt;新列名&gt;&lt;数据类型&gt;[完整性约束]][ADD&lt;表级完整性约束&gt;][DROP [COLUMN] &lt;列名&gt;[CASCADE|RESTRICT]][DROP CONSTRAINT&lt;完整性约束名&gt; [RESTRICT|CASCADE]][ALTER COLUMN &lt;列名&gt;&lt;数据类型&gt;]\n\n(三)索引的建立与删除数据库索引有多种类型，常见的有顺序文件上的索引、B+树索引、hash索引、位图索引等。\n顺序文件上的索引：按定属性值升序或降序存储\nB+树索引：将索引属性组织成B+树形式，B+树的叶结点为属性值和相应的元组指针，B+树索引具有动态平衡优点。\nhash索引：建立若干个桶，将索引属性按照其hash函数映射到相应桶中，桶中存放索引属性值和相应的元组指针。hash索引具有查找速度快的特点。\n位图索引：用位向量记录索引属性中可能出现的值，每个位向量对应一个可能值。\n1、建立索引\n使用CREATE INDEX语句，一般格式为\nCREATE [UNIQUE][CLUSTER] INDEX&lt;索引名&gt;ON &lt;表名&gt;(&lt;列名&gt;[&lt;次序&gt;][,&lt;列名&gt;[&lt;次序&gt;]]...)\n\n例：为学生-可成数据库中的Student、Course和SC三个表建立唯一索引。其中Student是按照升序建立唯一索引，Course表按课程号升序建立唯一索引，SC表按照学号升序和课程表降序建立唯一索引\nCREATE UNIQUE INDEX Stusno ON Student(Sno);CREATE UNIQUE INDEX Coucno On Course(Cno);CREATE UNIQUE INDEX SCno ON SC(Sno ASC,Cno DESC);\n\n2、修改索引\n例：将SC表中的SCno索引名改为SCSno\nALTER INDEX SCno RENAME TO SCSno;\n\n3、删除索引\n例：删除Student表的Stusname索引\nDROP INDEX Stusname;\n\n四、数据的增删改查具体可以看以下博客：\nSQL的增删改查\n五、视图视图时从一个或几个基本表（或视图）导出的表。它与基本表不同，是一个虚表。数据库中只存放视图的定义，而不存放视图对应的数据，这些数据仍放在原来的基本表中。\n视图一经定义，就可以跟基本表一样被查询、被删除。也可以在一个视图之上再定义新的视图，但是对新视图的（增、删、改）操作有一定的限制。\n定义视图1、建立视图\nSQL语言用 create view 命令建立视图，其一般格式为：\ncreate view &lt;视图名&gt; [ ( &lt;列名&gt; [ ，&lt;列名&gt; ]... ) ]as &lt;子查询&gt;                                                            [ with check option ]                                          \n\n其中子查询可以是任意的select子句，是视图数据的来源。\nwith check option 表示对视图进行 update、insert、delete 操作时要保证更新、插入或删除的行满足视图定义中的谓词条件（即子查询语句中的条件表达式）\n组成视图的属性列名或者全部省略或者全部指定，没有第三章并选择。如果省略了视图个各个属性列名，则隐含该视图由子查询中select子句目标列中的诸字段组成。但是在下列三种情况下必须明确的指定组成视图的所有列名：\n（1）某个目标列不是单纯的属性名，而是聚集函数或表达式式\n（2）多表连接时选出了几个同名列作为视图的字段\n（3）需要在视图中为某个列启用新的更合适的名字\n例：建立软件工程专业学生的视图\ncreate view SG_Studentasselect Sno,Sname,Sagefrom Studentwhere Sdept=&#x27;软件工程&#x27;;\n\n关系数据库管理系统执行create view语句的结果只是把视图的定义存入数据字典，并不执行其中的select 语句。只是在对视图查询时，才按照视图的定义从基本表中将视图查出。\n例：建立软件工程专业学生的视图，并要求进行修改和插入操作时仍需要保证该视图只有软件工程专业的学生。\ncreate view SG_Studentasselect Sno,Sname,Sagefrom Studentwhere Sdept=&#x27;软件工程&#x27;with check option;\n\n由于在定义SG_Student 视图时加上了with check option 子句，以后对该视图进行插入、修改和删除操作时，关系数据库管理系统会自动加上 Sdept&#x3D;’软件工程’ 的条件。\n例：定义一个反应学生出生年份的视图\ncreate view BT_S （Sno,Sname,Sbirth）asselect Sno,Sname,2021-Sagefrom Student;\n\n视图中的出生年份时通过计算得到的。\n2、删除视图\n该语句格式为： drop view &lt;视图名&gt; [ cascade ] ；\n视图删除后视图的定义将从数据字典中删除。如果视图还导出了其他视图，则使用cascade级联删除语句把该视图和由它导出的视图一起删除。\n查询视图视图定义后，用户就可以向&#x3D;像对基本表一样对视图进行查询了。\n关系数据库管理系统执行对视图的查询时，首先进行有效性检查，检查查询中涉及的表、视图是否存在。如果存在，则从数据字典中取出视图的定义，把定义中的子查询和用户的查询结合起来，转换成等价的对基本表的查询，然后再执行修正了的查询。这一转换过程称为视图消解 。\n视图的作用1、视图能够简化用户的操作\n2、视图使用户能以多种角度看待同一数据\n3、视图对重构数据库提供了一定程度上的逻辑独立性\n4、视图能够对机密数据提供安全保护\n5、适当利用视图可以更清晰的表达\n","categories":["DataBase"],"tags":["DataBase"]},{"title":"数据库系统概论六（数据库编程)","url":"/2023/07/17/DB6/","content":"\nSQL编程技术可以有效克服SQL语言实现复杂应用方面的不足，提高应用系统和数据库管理系统的互操作性\n一、嵌入式SQL（一）嵌入式SQL的处理过程嵌入式SQL是将SQL语言嵌入到语言中，被嵌入的语言称为宿主语言。\n主语言为C时，语法格式：\nEXEC SQL&lt;SQL语句&gt;;\n主语言为JAVA时，语法格式:\n#SQL {&lt;SQL语句&gt;};\n（二）嵌入式SQL语句与主语言之间的通信数据库工作单元和源程序工作单元之间的通信主要包括：\n（1）向主语言传递SQL语句的执行状态信息，使主语言能够据此信息控制程序流程，主要用SQL通信区实现\n（2）主语言向SQL语言提供参数，主要用主变量来实现\n（3）将SQL语句查询数据库的结果交主语言去处理，主要用主变量和游标实现\n1、SQL通信区\nSQL语句执行后，系统要反馈给应用程序若干信息，主要包括描述系统当前工作状态和运行环境的各种数据。\n2、主变量\n嵌入式SQL语句可以使用主语言的程序变量来输入或输出数据。\n3、游标\n为了避免一次执行整个SQL，返回结果包含大量行，撑爆内存，整个时候可以使用游标来封装刚刚提到的“整个查询”。\n游标有显式游标和隐式游标：\n显式游标主要用于对查询语句的处理，尤其是查询结果返回多条记录的情况。隐式游标由系统定义，“对于非查询语句，如修改、删除操作，则由系统自动地为这些操作设置游标并创建其工作区，这些由系统隐含创建的游标称为隐式游标，隐式游标的名字为SQL”。\n（三）不用游标的SQL语句1、查询结果为单SELECT语句\n这类语句因为查询结果只有一个，只需INTO子句指定存放查询结果的主变量，不需要使用游标\n2、非CURRENT形式的增删改查语句\n有些非CURRENT形式的增删改查语句不需要使用游标。\n（四）使用游标的SQL语句1、查询结果为多SELECT语句\n一般情况下，SELECT语句查询结果是多条记录的SELECT语句、CURRENT形式的UPDATE和DELETE语句\n（1）说明游标\n定义游标：\nEXEC SQL DECLARE&lt;游标名&gt;CURSOR FOR&lt;SELECT语句&gt;;\n（2）打开游标\nEXEC SQL OPEN&lt;游标名&gt;;\n（3）推进游标指针并取当前记录\nEXEC SQL FETCH &lt;游标名&gt; \t INTO&lt;主变量&gt;[&lt;指示变量&gt;][,&lt;主变量&gt;[&lt;指示变量&gt;]];\n\n（4）关闭游标\nEXEC SQL CLOSE&lt;游标名&gt;;\n2、CURRENT形式的UPDATE和DELETE语句\nUPDATE语句和DELETE语句中要用的子句：\nWHERE CURRENT OF &lt;游标名&gt;;\n二、过程化SQL（一）过程化SQL的块结构基本的SQL是高度非过程化的语言。嵌入式SQL将SQL语句嵌入程序设计语言，借助高级语言的控制功能实现过程化。过程化SQL是对SQL的扩展，使其增加了过程化语句功能。过程化SQL程序的基本结构是块。所有的过程化SQL程序都是由块组成的。这些块之间可以相互嵌套，每个块完成一个逻辑操作。\n1.过程化SQL块的基本结构图示：\n\n\n2.量和常量的定义变量定义变量名 数据类型 [[NOT NULL] :&#x3D;初值表达式]或者变量名 数据类型 [[NOT NULL] 初值表达式]常量定义常量名 数据类型 CONSTANT:&#x3D;常量表达式常量必须要给一个值，并且该值在存在期间或常量的作用域内不能改变。如果试图修改它，过程化SQL将返回一个异常。赋值语句变量名 :&#x3D;表达式\n\n流程控制过程化SQL提供了流程控制语句，主要有条件控制语句和循环控制语句。这些语句的语法、定义和一般的高级语言类似。\n条件控制语句1)IF语句\n\nIF  condition  THEN    Sequence_of_statements;     /*条件为真时语句序列才被执行*/END IF      /*条件为假或NULL时什么也不做，控制转移至下一个语句*/\n\n2)IF-THEN语句\nIF  condition  THEN    Sequence_of_statements1;     /*条件为真时语句序列才被执行*/ELSE    Sequence_of_statements2;     /*条件为假或NULL时才被执行*/  END IF\n\n套的IF语句在THEN和ELSE子句中还可以包含IF语句，IF语句可以嵌套。\n\n循环控制语句1)最简单的循环语句LOOP\n\nLOOP    Sequence_of_statements；    /*循环体，一组过程化SQL语句*/END LOOP;\n\n多数数据库服务器的过程化SQL都提供EXIT、BREAK或LEAVE等循环结束语句以保证LOOP语句块能够在适当的条件下提前结束。2)WHERE-LOOP循环语句\nWHERE condition LOOP    Sequence_of_statements；    /*条件为真时执行循环体内的语句序列*/END LOOP;\n\n每次执行循环体语句之前首先对条件进行求值，如果条件为真则执行循环体内的语句序列，如果条件为假则跳过循环并把控制传递给下一个语句。3)FOR-LOOP\nFOR count IN [REVERSE] bound1...bound2  LOOP     Sequence_of_statements；END LOOP;\n\nFOR循环的基本执行过程:将count设置为循环的下界bound1，检查它是否小于上界bound2。当指定REVERSE时则将count设置为循环的上界bound2，检查count是否大于下界bound1。如果越界则执行跳出循环，否则执行循环体，然后按照步长（+1或-1）更新count的值，重新判断条件。3. 错误处理如果过程化SQL在执行时出现异常，则应该让程序在产生异常的语句处停下来，根据异常的类型去执行异常处理语句。SQL标准对数据库服务器提供什么样的异常处理作出了建议，要求过程化SQL管理器提供完善的一次处理机制。\n（二）存储过程和函数过程化SQL块主要有命名块和匿名块。匿名块每次执行时都要进行编译，它不能被存储到数据库中，也不能在其他过程化SQL块中调用。过程和函数是命名块，他们被编译后保存在数据库中，称为持久性存储模块（PSM），可以 被反复调用，运行速度较快。\n1.存储过程存储过程是由过程化SQL语句书写的过程，这个过程经编译和优化后存储在数据库服务器中，因此称它为存储过程，使用时只要调用即可。\n\n存储过程的优点1）由于存储过程不像解释执行的SQL语句那样在提出操作请求时才进行语法分析和优化工作，因而运行效率高，它提供了在服务器端快速执行SQL语句的有效途径。2）存储过程降低了客户机和服务器之间的通信量。客户机上的应用程序只要通过网络向服务器发出调用存储过程的名字和参数，就可以让关系数据库管理系统执行其中的多条SQL语句并进行数据处理，只有最终的处理结果才返回客户端。3）方便实施企业规则。可以把企业规则的运算程序写成存储过程放入数据库服务器中，由关系数据库管理系统管理，既有利于集中控制，又能够方便地进行维护。当企业规则发生变化时只要修改存储过程即可，无需修改其他应用程序。\n存储过程的用户接口1）创建存储过程\n\nCREATE OR REPLACE PROCEDURE 过程名（[参数1，参数2,,,]）   /*存储过程首部*/\n\nAS &lt;过程化SQL块&gt;  &#x2F;存储过程体，描述该存储过程的操作&#x2F;存储过程包括过程首部和过程体，在过程首部，“过程名”是数据库服务器合法的对象标识；参数列表[参数1，参数2,,,]用名字来标识调用时给出的参数值，必须指定值的数据类型。过程体是一个&lt;过程化SQL块&gt;，包括声明部分和可执行语句部分。2）执行存储过程\nCALL/PERFORM PROCEDURE 过程名（[参数1，参数2,,,]）\n\n使用CALL或者PERFORM等方式激活存储过程的执行，在过程化SQL中，数据库服务器支持在过程体中调用其他存储过程。3）修改存储过程\nALTER PROCEDURE 过程名1 RENAME TO 过程名2；（重新命名一个存储过程）ALTER PROCEDURE 过程名 COMPILEL;（重新编译一个存储过程）\n\n4）删除存储过程\nDROP PROCEDURE 过程名()；\n\n\n函数函数必须指定返回的类型。\n函数的定义语句格式\n\nCREATE OR REPLACE FUNCTION 函数名([参数名1，参数名2，...]) RETURNS&lt;类型&gt; AS &lt;过程化SQL块&gt;函数的执行语句格式CALL/SELECT  函数名([参数名1，参数名2，...])修改函数重命名一个自定义函数ALTER FUNCTION 函数名1 RENAME TO 函数名2重新编译一个函数ALTER FUNCTION 函数名 COMPILE;\n\n（三）过程化SQL中的游标和嵌入式SQL一样，在过程化SQL中如果SELECT语句只返回一条记录，可以将该结果存放到变量中。当查询返回多条记录时，就要使用游标对结果集进行处理。一个游标与一个SQL语句相关联。在存储过程中可以定义普通 游标、REFCURSOR类型游标、带参数的游标等。\n存储过程和自定义函数用的比较多，因此对存储过程和函数要加深了解。\n三、存储过程和函数（一）存储过程1、存储过程的优点：\n（1）不像SQL执行解释进行语法分析和优化，运行效率高\n（2）存储过程降低了客户机和服务器之间的通信量\n（3）方便实施企业规则\n2、存储过程的用户接口\n（1）创建存储过程\nCREATE OR REPLACE PROCEDURE 过程名([参数1][参数2]);\n\n（2）执行存储过程\nCALL/PERFORM PROCEDURE 过程名([参数1][参数2]);\n\n（3）修改存储过程\n重命名一个存储过程：\nALTER PROCEDURE 过程名1 RENAME TO 过程名2;\n\n重编译一个存储过程：\nALTER PROCEDURE 过程名 COMPLIE;\n\n（4）删除存储过程\nDROP PROCEDURE 过程名();\n\n（二）函数1、函数定义的语言格式\nCREATE OR REPLACE FUNCTION 函数名([参数1,参数2,...]) RETURNS &lt;类型&gt;AS &lt;过程化SQL块&gt;;\n\n2、函数的执行语句格式\nCALL/SELECT 函数名([参数1.参数2,...]);\n\n3、修改函数\n重命名一个自定义函数：\nALTER FUNCTION 过程名1 RENAME TO 过程名2;\n\n重编译一个函数：\nALTER FUNCTION 函数名 COMPILE;\n\n四、ODBC编程（一）ODBC概述ODBC是为了解决连接不同关系数据库管理系统的方法、技术和软件，使数据库系统“开放”，能够实现“数据库互连”这些问题的接口标准。它是微软公司开放服务体系（WOSA）中有关数据库的一个组成部分，它建立了一组规范，并提供一组访问数据库的应用程序接口（API）。ODBC具有两重功效或约束力：一方面规范应用开发，另一方面规范数据库管理系统应用接口。\n（二）ODBC工作原理1、用户应用程序用户应用程序提供用户界面、应用逻辑和事务逻辑。使用ODBC开发数据库应用程序时，应用程序调用的是标准的ODBC函数和SQL语句。应用层使用ODBC API调用接口与数据库进行交互。使用ODBC来开发应用系统的程序简称ODBC应用程序，包括：\n\n请求连接数据库。\n\n向数据源发送SQL语句。\n\n为SQL语句执行结果分配存储空间，定义所读取的数据格式。\n\n获取数据库操作结果或处理错误。\n\n进行数据处理并向用户提交处理结果。\n\n请求事务的提交和回滚操作。\n\n断开与数据源的连接。\n\n\n2、ODBC驱动程序管理器驱动程序管理器用来管理各种驱动程序。ODBC驱动程序管理器由微软公司提供，它包含在ODVC32.DLL中，对用户是透明的，管理应用程序和驱动程序之间的通信。ODBC驱动程序管理器主要功能包含装载ODBC驱动程序、选择和连接正确的驱动程序、管理数据源、检查ODBC调用参数的合法性及记录ODBC函数的调用等，当应用层需要时返回驱动程序的有关信息。ODBC驱动程序管理器可以建立、配置或删除数据源，并查看系统当前所安装的数据库ODBC驱动程序。\n3、数据驱动程序ODBC通过数据库驱动程序来提供应用系统与数据库平台的独立性。ODBC应用程序不能直接存储数据库，其各种操作请求由驱动程序管理器提交给某个关系数据库管理系统的ODBC驱动程序，通过调用驱动程序所支持的函数来存取数据库。数据库的操作结果也通过驱动程序返回给应用程序。如果应用程序要操纵不同的数据库，就要动态地链接到不同的驱动程序上。\nODBC驱动程序\n\n单束数据库和应用程序在同一台机器上，驱动程序直接完成对数据文件的I&#x2F;O操作，这时驱动程序相当于数据管理器。\n多束支持客户机-服务器、客户机-应用服务器&#x2F;数据库服务器等网络环境下的数据访问，这时由驱动程序完成数据库访问请求的提交和结果集接收，应用程序使用驱动程序提供的结果集管理接口操纵执行后的结果数据。\n\n4、ODBC数据源管理数据源是最终用户要访问的数据，包含了数据库位置和数据库类型等信息，实际上是一种数据连接的抽象。ODBC给每个被访问的数据源指定唯一的数据源名（DSN），并映射到所有必要的、用来存取数据的低层软件。在连接中，用数据源名来代表用户名、服务器名、所连接d 数据库名等。最终用户无须知道数据库管理系统或其他数据库管理软件、网络以及有关ODBC驱动程序的细节，数据源对最终用户是透明的。\n（三）ODBC工作流程使用ODBC的应用系统大致的工作流程：\n\n\n\n配置数据源运行数据管理工具来进行配置使用Driver Manager提供的ConfigDsn函数来增删改数据源。这种方法特别适用于在应用程序中创建临时使用的数据源。\n\n初始化环境由Driver Manager来进行控制并配置环境属性，直到应用程序通过调用连接函数和某个数据源进行连接后，Driver Manager才调用多连的驱动程序中的SQLAllcoHandle来真正分配环境句柄的数据结构。\n\n建立连接应用程序用SQLAllocHandle分配连接句柄，通过SQLConnect、SQLDriverConnect或SQLBroeseConnect与数据源连接。其中SQLConnect是最简单的连接函数，输出参数为配置好的数据源名称、用户ID和口令。\n\n分配语句句柄在处理任何SQL语句之前，应用程序还需要首先分配一个语句句柄。语句句柄含有具体的SQL语句以及输出的结果集等信息。在后面的执行函数中，语句句柄都是没有必要的输入参数。应用程序还可以通过SQLtStmtAttr来设置语句属性。\n\n执行SQL语句应用程序处理SQL语句的方式：预处理或直接执行。如果SQL语句含有参数，应用程序为每个参数调用SQLBindParameter，并把它们绑定至应用程序变量。这样应用程序可以直接通过改变应用程序缓冲区的内容从而在程序中动态改变SQL语句的具体执行。接下来的操作则会根据语句类型来进行相应处理。\n\n对于有结果集的语句（select或是编目函数），则进行结果集处理。\n\n对于没有结构集的函数，可以直接利用本语句句柄继续执行新的语句或是获取行技术（本次执行所影响的行数）之后继续执行。\n\n结果集处理应用程序可以通过SQLNubResultCols来获取结果集中的列数，通过SQL DescribeCol或是SQLColAttrbute函数来获取结果集每一列的名称、数据类型、精度和范围。ODBC中使用游标来处理结果集数据。游标可分为forward-only游标和可滚动游标。Foward-only游标只能在结果集中向前滚动，它是ODBC的默认游标类型。可滚动游标又可以分为静态、动态、码集驱动和混合型驱动4种。ODBC游标的打开方式不同于嵌入式SQL，不是显式声明而是系统自动产生一个游标，当结果集刚刚生成时，游标指向第一行数据之前。应用程序通过SQLBindCol把查询结果绑定到应用程序缓冲区中，通过SQLFetch或是SQLFetchScroll来移动游标获取结果集中的每一行数据。\n\n中止处理处理接收后，应用程序将首先释放语句句柄，然后释放数据库连接并与数据库服务器断开，最后释放ODBC环境。\n\n\n","categories":["DataBase"],"tags":["DataBase"]},{"title":"数据库系统概论五（数据库设计)","url":"/2023/07/17/DB5/","content":"\n数据库设计：设计数据库本身，设计数据库的各级模式并建立数据库。\n一、数据库设计概述（一）数据库设计的特点“三分技术，七分管理，十二分基础数据”\n数据的收集、整理、组织和不断更新是数据库建设中的重要环节。\n（二）结构设计和行为设计相结合\n\n（三）数据库设计的基本步骤\n\n1、需求分析阶段\n首先必须了解与分析用户的需求。需求分析是整个设计过程的基础。\n2、概念结构设计阶段\n概念结构设计是整个数据库设计的关键，通过对用户进行综合、归纳、抽象，形成一个独立于具体数据库管理系统的概念模型\n3、逻辑结构设计阶段\n将概念结构设计转换为某个数据库管理系统所支持的数据模型\n4、物理结构设计阶段\n将逻辑数据模型结构转换为一个最适合的物理结构（包括存储结构和存取方法）\n5、数据库实施阶段\n设计人员运用数据库管理系统提供的数据库语言及其宿主语言，根据逻辑设计和物理设计的结果建立数据库，编写程序，进行测试\n6、数据库运行和维护阶段\n数据库应用系统经试运行可以正式运行，运行过程中对数据库不断地评估、调整和整改。\n\n\n（四）数据库设计过程中的各级模式\n\n二、需求分析（一）需求分析的任务调查的重点是”数据“和”处理“，通过调查、收集和分析，获得用户对数据库的如下要求：\n1、信息要求\n2、处理要求\n3、安全性与完整性要求\n（二）需求分析的方法调查用户的具体步骤：\n1、调查组织机构情况\n2、调查各部门的业务活动情况\n3、在熟悉业务活动的基础上，协助用户明确对新系统的各种要求\n4、确定新系统的边界\n（三）数据字典它是关于数据库中数据的描述，即元数据，而不是数据本身。数据字典是在需求分析阶段建立，在数据库设计过程中不断修改、充实、完善的。它在数据库设计中占有很重要的地位。\n三、概念结构设计（一）概念模型   在需求分析阶段所得到的应用需求应该首先抽象为信息世界的结构，然后才能更改、更准确地用某一数据库管理系统实现这些需求。   概念模型的主要特点：\n\n能真实、充分地反映现实世界，包括事物和事物之间的联系，能满足用户对数据的处理要求，是现实世界的一个真是模型。\n易于理解，可以用它和不熟悉计算机的用户交换意见。用户的积极参与是数据库设计成功的关键。\n易于更改，当应用环境和应用要求改变时容易对概念模型修改和扩充。\n易于向关系、网状、层次等各种数据模型转换。   概念模型是各种数据模型的共同基础，它比数据模型更独立于机器、更抽象，从而更加稳定。描述概念模型的有力工具是E-R模型。\n\n（二）E-R模型1、E-R图简介      E-R图也称实体-联系图(Entity Relationship Diagram)，提供了表示实体类型、属性和联系的方法，用来描述现实世界的概念模型。\n  它是描述现实世界关系概念模型的有效方法。是表示概念关系模型的一种方式。用“矩形框”表示实体型，矩形框内写明实体名称；用“椭圆图框”或圆角矩形表示实体的属性，并用“实心线段”将其与相应关系的“实体型”连接起来；\n  用”菱形框“表示实体型之间的联系成因，在菱形框内写明联系名，并用”实心线段“分别与有关实体型连接起来，同时在”实心线段“旁标上联系的类型（1:1,1:n或m:n）。\n2、E-R图成分      在ER图中有四个成分，矩形框，菱形框，椭圆形框和连线。\n（1）矩形框\n 矩形框表示实体，在框中记入实体名。\n（2）菱形框\n菱形框表示联系，在框中记入联系名。\n（3）椭圆形框\n  椭圆形框表示实体或联系的属性，将属性名记入框中。对于主属性名，则在其名称下划一下划线。\n（4）连线\n  实体与属性之间；实体与联系之间；联系与属性之间用直线相连，并在直线上标注联系的类型。（对于一对一联系，要在两个实体连线方向各写1； 对于一对多联系，要在一的一方写1，多的一方写N；对于多对多关系，则要在两个实体连线方向各写N,M。) \n3、一般性约束      实体-联系数据模型中的联系型，存在3种一般性约束：一对一约束（联系）、一对多约束（联系）和多对多约束（联系），它们用来描述实体集之间的数量约束。\n（1）一对一联系(1 ∶1)\n  对于两个实体集A和B，若A中的每一个值在B中至多有一个实体值与之对应，反之亦然，则称实体集A和B具有一对一的联系。一个学校只有一个正校长，而一个校长只在一个学校中任职，则学校与校长之间具有一对一联系。\n（2）一对多联系(1 ∶N)\n  对于两个实体集A和B，若A中的每一个值在B中有多个实体值与之对应，反之B中每一个实体值在A中至多有一个实体值与之对应，则称实体集A和B具有一对多的联系。\n   例如，某校教师与课程之间存在一对多的联系“教”，即每位教师可以教多门课程，但是每门课程只能由一位教师来教。一个专业中有若干名学生，而每个学生只在一个专业中学习，则专业与学生之间具有一对多联系\n（3） 多对多联系(M ∶N)\n   对于两个实体集A和B，若A中每一个实体值在B中有多个实体值与之对应，反之亦然，则称实体集A与实体集B具有多对多联系\n  例如，表示学生与课程间的联系“选修 ”是多对多的，即一个学生可以学多门课程，而每门课程可以有多个学生来学。联系也可能有属性。例如，学生“ 选修” 某门课程所取得的成绩，既不是学生的属性也不是课程的属性。由于“ 成绩” 既依赖于某名特定的学生又依赖于某门特定的课程，所以它是学生与课程之间的联系“ 选修”的属性。\n4、弱实体     弱实体(weak entity)是一种数据库系统术语。其定义为一个实体对于另一个实体（一般为强实体，也可以是依赖于其他强实体的弱实体）具有很强的依赖联系，而且该实体主键的一部分或全部从其强实体（或者对应的弱实体依赖的强实体）中获得，则称该实体为弱实体。\n 在现实世界中，有些实体对一另一些实体有很强的依赖关系，即一个实体的存在必须以另一实体的存在为前提。前者就称为”弱实体”，如在人事管理系统中，职工子女的信息就是以职工的存在为前提的，子女实体是弱实体，子女与职工的联系是一种依赖联系。在ER图中用双线框表示弱实体。用箭头表示依赖联系。又如，学生家长是一种弱实体，因为只有学生实体存在，家长实体才会存在。用箭头表示依赖联系。\n（三）概念结构设计 概念结构设计的第一步就是对需求分析阶段收集到的数据进行分类、组织，确定实体、实体的属性、实体之间的联系类型，形成E-R图。\n\n实体与属性的划分原则\n\n事实上，在现实世界中具有的应用环境常常对实体和属性已经作了自然的大体划分。为了简化E-R图的处置，现实世界的事物能作为属性的对待的尽量作为属性对待，不过要满足：\n\n作为属性，不能再具有需要描述的性质，即属性必须是不可分的数据项，不能包含其他属性。\n\n属性不能与其他实体具有联系，即E-R图中所表示的联系是实体之间的联系。\n\nE-R图的集成\n\n\nE-R图的集成步骤图示：\n\n合并解决各分E-R图之间的冲突，将分E-R图合并起来生成初步E-R图。合理消除各E-R图中的冲突是合并E-R图的主要工作与关键所在。各子系统的E-R图之间的冲突主要有三类：1）属性冲突：属性域冲突，即属性值的类型、取值范围或取值集合不同；属性取值单位冲突。2）命名冲突：同名异义，即不同意义的对象在不同的局部应用中具有相同的名字；异义同名（一义多名），即同一意义的对象再不同的局部应用中具有不同的名字。3）结构冲突：同一对象在不同应用中具有不同的抽象；同一实体在不同子系统的E-R图中所包含的属性个数和属性排列次序不完全相同；实体间的联系在不听的E-R图中为不同的类型。\n修改和重构消除不必要的冗余，生成基本E-R图。所谓冗余的数据是指可由基本数据导出的数据，冗余的联系是指可由其他联系导出的联系。冗余数据和冗余联系容易破坏数据库的完整性，给数据库维护增加困难，应当予以消除。分析方法消除冗余，即以数据字典和数据流图为依据，根据数据字典中关于数据项之间逻辑关系的说明来消冗余。\n\n规范化理论消除冗余，具体方法可以分为1）确定分E-R图实体之间的数据依赖。实体之间一对一、一对多、多对多的联系可以用实体码之间的函数依赖来表示。2）求Fl的最小覆盖Gl，差集为D&#x3D;Fl-Gl。备注：并不是所有的冗余数据与冗余联系都必须加于消除，有时候为了提高效率不得不以冗余信息作为代价\n四、逻辑结构设计（一）概念​        逻辑结构设计是将概念结构设计阶段完成的概念模型，转换成能被选定的数据库管理系统(DBMS)支持的数据模型。这里主要将E-R模型转换为关系模式。需要具体说明把原始数据进行分解、合并后重新组织起来的数据库全局逻辑结构，包括所确定的关键字和属性、重新确定的记录结构和文件结构、所建立的各个文件之间的相互关系，形成本数据库的数据库管理员视图。一般的逻辑设计分为以下3步：初始关系模式设计、关系模式规范化、模式的评价与改进。\n（二）初始关系模式设计（E-R图转换关系模式）1、实体集向关系模式的转换        实体集的转换规则：一个实体型转换为一个关系模式。实体的属性就是关系的属性，实体的码就的码。\n例：学生实体可以转换为如下关系模式：\n学生（学号，姓名，性别，出生日期，所在系，年级）\n2、两个实体型之间的联系集向关系模式的转换（1）1：1联系的转换\n​    1:1联系可以转换为一个独立的关系模式，也可以与任意一端对应的关系模式合并。\n​    如果转换为一个独立的关系模式，则与该联系相连的各实体的主码以及联系本身的属性均转换为关系的属性，每个实体的主码均是该关系的候选码。如果与某一端对应的关系模式合并，则需要在该关系模式的属性中加入另一个关系模式的主码和联系本身的属性。\n（2）1:n联系转换\n​     1:n联系可以转换为一个独立的关系模式，也可以与n端对应的关系模式合并。\n​    若转换为一个独立的关系模式，则与该联系相连的各实体的主码以及联系本身的属性均转换为关系的属性，而关系的主码为n端实体的主码。若与n端关系模式合并，则在n端实体集中增加新属性，新属性由联系对应的1端实体集的主码和联系自身的属性构成，而关系模式的主码不变。\n(3)m:n联系的转换\n​    与该联系相连的各实体的码以及联系本身的属性均转换为关系的属性。而关系的码为各实体码的组合。 \n3、同一实体型之间的联系集向关系模式的转换        同一实体型的实体间的联系即自联系，也可按上述1:1、1:n和m:n三种情况分别处理。\n （1)1：1联系的转换\n（2）1:n联系的转换\n（3）m:n联系的转换\n4、多实体型之间的联系向关系模式的转换        两个以上的实体型间也存在着1:1、1:n和m:n三种情况。\n（1）1：n的多元联系\n​    修改1端实体集对应的关系，即将与联系相关的其他实体集的码和联系自身的属性作为新属性加入到1端实体集中。\n（2）m:n的多元联系\n​    新建一个独立的关系，多元联系相连的各实体的码以及联系本身的属性均转换为关系的属性。而关系的码为各实体码的组合。\n5、弱实体集向关系模式的转换        强实体集和弱实体集的概念与存在依赖密切相关，强实体集的成员必然是支配实体，而弱实体集的成员是从属实体。由于弱实体不能独立存在，它必须依附于一个所有者实体，因此将弱实体集转换成关系模式时，弱实体所对应的关系中必须包含所有者实体的主码。\n（三）关系模式规范化1、概念        数据库逻辑设计的结果不是唯一的。为了进一步提高数据库应用系统的性能，还应该根据应用需要适当修改、调整数据模型的结构，这就是数据模型的优化。关系数据模型的优化通常以规范化理论为指导，将关系模式规范化，使之达到较高的范式是设计好关系模式的唯一途径，否则，设计的关系数据库会产生一系列的问题。\n​    一个“好”的关系模式应当不会发生插入和删除异常，冗余度要尽可能少。对于存在问题的关系模式，可以通过模式分解的方法使之规范化。“分解”是解决冗余的主要方法，也是规范化的一条原则，“关系模式有冗余问题，就分解它”。\n​    函数依赖基本概念​    规范化是指用形式更为简洁、结构更加规范的关系模式取代原有关系模式的过程。\n​    关系模式必须满足一定的完整性约束条件以达到现实世界对数据的要求。完整性约束条件主要包括以下两个方面：\n​    对属性取值范围的限定\n​    属性值间的相互联系(主要体现在值的相等与否)，这种联系称为数据依赖。\n​    客观世界的事物间存在着错综复杂的联系，实体间的联系有两类：一类是实体与实体之间的联系；另一类是实体内部各属性间的联系。而属性间的联系可分为3类：\n​    一对一联系(1:1)。设X和Y是关系R的两个属性(集)。如果对于X中的任一具体值，Y中至多有一值与之对应；反之亦然，则称X、Y两属性间是一对一联系。\n​    一对多联系(1:n)。设X和Y是关系R的两个属性(集)。如果对于X中的任意具体值，Y中至多有一个值与之对应，而Y中的一个值却可以在X中的n个值(n≥0)相对应，则称Y对X是一对多联系。\n​    多对多联系(m:n)。设X和Y是关系R的两个属性(集)。如果对于X中的任意具体值，Y中有m个值(m≥0)与之对应，而Y中的一个值也可以和X中的n个值(n≥0)相对应，则称Y对X是多对多联系。\n​    数据依赖是指通过一个关系中属性间值的相等与否体现出来的数据间的相互关系，是现实世界属性间相互联系的抽象，是数据内在的性质。数据依赖共有3种：\n​    函数依赖(Functional Dependency, FD)\n​    多值依赖(Multivalued Dependency, MVD)\n​    连接依赖(Join Dependency, JD)\n​    其中最重要的是函数依赖和多值依赖。\n​    在数据依赖中，函数依赖是最基本、最重要的一种依赖，它是属性之间的一种联系，假设给定一个属性的值，就可以唯一确定(查找到)另一个属性的值。这种唯一性并非指只有一个记录，而是指任何记录。\n​    设有关系模式R(U)，X和Y均为U&#x3D;{A1, A2, …, An}的子集，r是R的任一具体关系，r中不可能存在两个元组在X上的属性值相等，而在Y上的属性值不等(也就是说，如果对于r中的任意两个元组t和s，只要有t[X]&#x3D;s[X]，就有t[Y]&#x3D;s[Y])，则称X函数决定Y，或称Y函数依赖于X，记作X→Y，其中X叫作决定因素(Determinant)，Y叫作依赖因素(Dependent)。\n​    属性间联系决定函数依赖。\n​    1:1联系。如果两属性集X、Y之间是1:1联系，则存在函数依赖X←→Y。\n​    1:n联系。如果两属性集X、Y之间是n:1联系，则存在函数依赖X→Y。\n​    m:n联系。如果两属性集X、Y之间是m:n联系，则不存在函数依赖。\n​    识别函数依赖是理解数据语义的一个组成部分，依赖是关于现实世界的断言，它不能被证明，决定关系模式中函数依赖的唯一方法是仔细考察属性的含义。\n2、范式\n​    利用规范化理论，使关系模式的函数依赖集满足特定的要求，满足特定要求的关系模式称为范式(Normal Form)。关系按其规范化程度从低到高可分为5级范式，分别称为1NF、2NF、3NF(BCNF)、4NF、5NF。规范化程度较高者必是较低者的子集。一个低一级范式的关系模式，通过模式分解可以转换成若干个高一级范式的关系模式的集合，这个过程称为规范化。\n（1）第一范式(1NF)        如果关系模式R中不包含多值属性(每个属性必须是不可分的数据项)，则R满足第一范式(First Normal Form)，记作R∈1NF 。1NF是规范化的最低要求，是关系模式要遵循的最基本的范式，不满足1NF的关系是非规范化的关系。关系模式如果仅仅满足1NF是不够的，只有对关系模式继续规范化，使之满足更高的范式，才能得到高性能的关系模式。\n（2）第二范式(2NF)        如果关系模式R(U, F)∈1NF，且R中的每个非主属性完全函数依赖于R的某个候选码，则R满足第二范式(Second Normal Form)，记作R∈2NF。不满足2NF的关系模式，会产生以下几个问题：插入异常、删除异常、更新异常。解决的办法是用投影分解把关系模式分解为多个关系模式。投影分解是把非主属性及决定因素分解出来构成新的关系，决定因素在原关系中保持，函数依赖关系相应分开转化(将关系模式中部分依赖的属性去掉，将部分依赖的属性单组组成一个新的模式)。\n（3）第三范式(3NF)        如果关系模式R(U, F)∈2NF，且每个非主属性都不传递函数依赖于任何候选码，则R满足第三范式(Third Normal Form)，记作R∈3NF。解决的办法同样是投影分解。3NF是一个可用的关系模式应满足的最低范式，也就是说，一个关系模式如果不满足3NF，则实际上它是不能使用的。\n四、模式的评价与改进        关系模式的规范化不是目的而是手段，数据库设计的目的是最终满足应用需求。因此，为了进一步提高数据库应用系统的性能，还应该对规范化后产生的关系模式进行评价、改进，经过反复多次的尝试和比较，最后得到优化的关系模式。\n五、物理结构设计为一个给定的逻辑数据模型选定一个最合适应用要求的物理结构的过程，就是数据库的物理设计。\n\n物理设计步骤数据库的物理设计通常分为两步：\n\n(1) 确定数据库的物理结构，在关系数据库中主要指存取方法和存储结构。\n(2) 对物理结构进行评价，评价的重点是时间和空间效率。\n如果评价结果满足原设计要求，则可进入到物理实施阶段，否则，就需要重新设计或修改物理结构，有时甚至还要返回逻辑设计阶段修改数据模型。\n\n数据库物理设计的内容和方法希望设计优化的物理数据库结构，使得在数据库上运行的各种事务相应时间小，存储空间利用率高，事务吞吐率大，因此需要：\n\n(1) 首先要对运行的事务进行详细分析，获得选择物理数据库设计所需要的参数。\n(2)要充分了解所用关系数据库管理系统的内部特征，特别是系统提供的存取方法和存储结构。\n\n关系模式存取方法选择B+树索引存取方法的选择选择索引存取方法就是根据应用要求确定对关系的那些属性列建立索引，哪些属性列建立组合索引，哪些索引要设计唯一索引等。\n\n如果一个（或一组）属性经常在查询条件中出现，则考虑在这个（或这组）属性上建立索引（或组合索引）。如果一个属性经常作为最大值和最小值等聚集函数的参数，则考虑在这个属性上建立索引。如果一个（或一组）属性经常在连接操作的连接条件中出现，则考虑在这个（或这组）属性上建立索引。关系上定义的索引数并不是越多越好，系统为维护索引要付出代价，查找索引也要付出代价。\nhash索引存取方法的选择选择hash存取方法的规则：如果一个关系的属性主要出现在等值连接条件中或主要出现在等值比较选择条件中，而且满足下列两个条件之一，则此关系可以选择hash存取方法。\n一个关系的大小可预知，而且不变。关系的大小动态改变，但数据库管理系统提供了动态hash存取方法。聚簇存取方法的选择为了提高某个属性（或属性组）的查询速度，把这个或这些属性（称为聚簇码）上具有相同值的元组集中存放在连续的物理块中称为聚簇。\n聚簇功能可以大大提高按聚簇码进行查询的效率，聚簇功能不单适用于单个关系，也适用于经常进行连接操作的多个关系。一个数据库可以连接多个聚簇，一个关系只能加入一个聚簇。\n(1) 设计候选聚簇的条件\n对经常在一起进行连接操作的关系可以建立聚簇。如果一个关系的一组属性经常出现在相等比较条件中，则该单个关系可建立聚簇。如果一个关系的一个（或一组）属性上的值重复率很高，则此单个关系可建立聚簇。即对应每个聚簇码值的平均元组数不能太少。(2) 检查候选聚簇\n从聚簇中删除经常进行全表扫描的关系。从聚簇中删除更新操作远多于连接操作的关系。不同的聚簇中可能包含相同的关系，一个关系可以在某一个聚簇中，但不能同时加入多个聚簇。要从这多个聚簇方案（包括不建立聚簇）中选择一个较优的，即在这个聚簇上运行各种事务的总代价最小。4. 确定数据库的存储结构确定数据库物理结构主要指确定数据的存放位置和存储结构，包括确定关系、索引、聚簇、日志、备份等的存储安排和存储结构，确定系统配置等。确定数据的存放位置和存储结构要综合考虑存取时间、存储空间利用率和维护代价三方面的因素。这三个方面常常是相互矛盾的，因此需要进行权衡选择一个折中方案。\n确定数据的存放位置为了提高系统性能，应根据应用情况将数据的易变部分与稳定部分、经常存取部分和存取频率较低部分分开存放。\n确定系统配置关系数据库管理系统产品一般都提供了一些系统配置变量和存储分配参数，供设计人员和数据库管理员对数据库进行物理优化。初始情况下，系统都为这些变量赋予了合理的默认值。但是这些值不一定适合每一种应用环境，在进行物理设计时需要重新对些变量赋值，以修改系统的性能。\n\n评价物理结构\n\n  评价物理数据库的方法完全依赖于所选用的关系数据库管理系统，主要是从定量估算各种方案的存储空间、存取时间和维护代价入手，对估算结果进行权衡、比较，选择出一个较优的、合理的物理结构。如果该结构不符合用户需求，则需要修改设计。\n六、数据库的实施和维护（一）数据的载入和应用程序的调试数据库应用程序的设计应该与数据库设计同时进行。\n（二）数据库的试运行先输入小批量数据做调试用，待试运行基本合格后再大批量输入数据，逐步增加数据量，逐步完成运行评价。要做好数据库的转储和恢复工作。一旦故障发生，能使数据库尽快恢复，尽量减少对数据库的破坏。\n（三）数据库的运行和维护\n数据库的转储和恢复\n数据库的安全性、完整性控制\n数据库性能的监督、分析和改造\n数据库的重组织和重构造\n\n","categories":["DataBase"],"tags":["DataBase"]},{"title":"数据库系统概论四（数据库完整性)","url":"/2023/07/17/DB4/","content":"\n数据的完整性指的是数据的正确性和相容性\n一、实体完整性（一）定义实体完整性通常来说就是定义主码\n（二）实体完整性检查和违约处理1、检查主码值是否唯一，如果不唯一则拒绝插入或修改\n2、检查主码值的各个属性是否为空，只要一个为空就拒绝插入或修改\n检查记录中主码值是否唯一的一种方法是进行全表扫描，依次判断表中每一条记录的主码值与将插入记录的主码值是否相同。\n全表扫描非常耗时，为了避免这种情况，关系数据库管理系统一般都在主码上自动建立一个索引，如B+树索引，通过索引查找基本表中是否已经存在新的主码值，大大提升效率。\n二、参照完整性（一）定义参照完整性关系模型的参照完整性在CREATE TABLE中用FOREGIN KEY短语定义哪些列为外码，用REFERENCES短语指明外码参照哪些表的主码。\n例如，关系SC中的一个元组表示一个学生选修的某门课程的成绩，（Sno，Cno）是主码，Sno和Cno分别参照Student表的主码和Course表中的主码。\n例：定义SC中的参照完整性\nCREATE TABLE SC(Sno CHAR(9) NOT NULL,Cno CHAR(9) NOT NULL,Grade SMALLINT,PRIMARY KEY(Sno,Cno),FOREGIN KEY(Sno) REFERENCES Student(Sno),     /*在表级定义参照完整性*/FOREGIN KEY(Cno) REFERENCES Student(Cno)     /*在表级定义参照完整性*/);\n\n（二）参照完整性检查和违约处理\n\n三、用户定义的完整性（一）属性上的约束条件\n列值非空（NOT NULL）\n列值唯一（UNIQUE）\n检查列值是否满足一个条件表达式（CHECK）\n\n\n\n\n\n（二）元组上的约束条件\n\n四、完整性约束命名子句1、完整性约束命名子句\nCONSTRAINT&lt;完整性约束条件名&gt;&lt;完整性约束条件&gt;\n\n包括NOT NULL,UNIQUE,PRIMARY KEY,FOREIGN KEY,CHECK短语等。\n\n\n2、修改表中的完整性限制\n可以使用ALTER TABLE语句修改表中的完整性限制\n\n\n五、断言在SQL中可以使用数据定义语言中的CREATE ASSERTION语句，通过声明性断言来指定更具有一般性的约束。\n1、创建断言的格式\nCREATE ASSERETION &lt;断言名&gt;&lt;CHECK子句&gt;\n\n例：数据库课程限制最多60名学生选修\nCREATE ASSERTION ASSE_SC_DB_NUM\tCHECK(60&gt;=(SELECT COUNT(*)\t\tFROM Course,SC\t\tWHERE SC.CNO=COURSE.CNO AND COURSE.CNAME=&#x27;数据库&#x27;;\t)\n\n2、删除断言的语句格式\nDROP ASSERTION&lt;断言名&gt;\n\n六、触发器触发器是一种特殊类型的存储过程，它不同于存储过程，主要是通过事件触发而被执行的。而存储过程则需要主动调用其名字执行\n注意\n1、在 MySQL 5 中，触发器名必须在每个表中唯一，但不是在每个数据库中唯一，即同一数据库中的两个表可能具有相同名字的触发器2、每个表的每个事件每次只允许一个触发器，因此，每个表最多支持 6 个触发器，before&#x2F;after insert、before&#x2F;after delete、before&#x2F;after update\n优缺点：\n优点：可以保证数据安全，并进行安全校验\n缺点：过分依赖触发器，影响数据库的结构，增加数据库的维护成本\n语法\ndelimiter 自定义结束符号 create trigger 触发器名字 触发时间 触发事件 on 表 for each row begin   end 自定义的结束符合 delimiter ;\n\n1、触发器时间\n当 SQL 指令发生时，会令行中数据发生变化，而每张表中对应的行有两种状态：数据操作前和操作后\n\nbefore：表中数据发生改变前的状态\nafter：表中数据发生改变后的状态\n\n2、触发事件\n触发器是针对数据发送改变才会被触发，对应的操作只有\n\nINSERT\nDELETE\nUPDATE\n\n定义触发器\nCREATE TRIGGER &lt;触发器名&gt;     ON &lt;表名&gt;FOR/AFTER/INSTEAD [DELETE,INSERT,UPDATE]AS   &lt;触发动作体&gt;GO\n\n删除触发器\nDROP TRIGGER &lt;触发器名&gt; ON &lt;表名&gt;;\n\n","categories":["DataBase"],"tags":["DataBase"]}]